Programas en este repositorio:

-> run.py : corre la simulación del modelo de ising para diferentes tamaños
	    del sistema (L = {15, 30, 60, 120, 240, 480}). genera un archivo con los 
	    tiempos de ejecuación gastado para cada L. 

		    python run.py -N 1000 -b 0.3 -cold 1
		    
	    realizara este proceso para esos parametros de simulación

-> run_p.py : corre la simulación del modelo de ising para diferentes tamaños
	      del sistema (L = {15, 30, 60, 120, 240, 480}) ejecutando en paralelo
	      N veces el algoritmo de metropolis-hasting. genera un archivo con los 
	      tiempos de ejecuación gastado para cada L. 

		      python run_p.py -N 1000 -b 0.3 -cold 1
		    
	      realizara este proceso para esos parametros de simulación

-> run_transition_p.py : corre la simulación del modelo de ising para diferentes valores del 
			 parametro beta ({0.01, 0.02,...,1}) en paralelo. genera un archivo 
			 con el estimado de monte carlo de la magnertización del sistema para
			 cada beta. esto sirve para graficar la transición de fase

		    		 python run_transition_p.py -L 256 -N 1000 -cold 1
		    
	    		 realizara este proceso para esos parametros de simulación


Nota: para un mejor rendimiento puede desactivar la visualización de progreso con el 
      parametro -nv (not verbose)

--> una vez se tengan los archivos, se pueden generar las gráficas y mediciones del sistema con:
	
	python get_outputs.py 
   
Nota: Los módulos se crearon con interfaz de linea de comandos, así que si necesita una descripción 
      parametro para correr la simualción puede ejecutar -h/--help.

Nota: dependiendo de la configuración de su maquina puede ser necesario que ejecute con python3
      en lugar de python. 

dependencias: para ejecutar este código necesita instalar los paquetes de python:
		- argparse
		- tqdm
	      Ademá de numpy y matplotlib.
